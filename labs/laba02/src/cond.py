# -*- coding: utf-8 -*-
"""cond.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19EXKt2o34TMTK8rp7Okt9ZaBuEGISvwX
"""

import numpy as np
import matplotlib.pyplot as plt

N= 24
n = 4
C= np.zeros((n, n), dtype=float)
b = np.full(n, fill_value=24, dtype=float)

for i in range(n):
    for j in range(n):
        C[i, j] = 0.1 * N * (i + 1) * (j + 1)

A = 159 / 10 * C**3 + C**2 + 25
x = np.linalg.solve(A, b)
cond_A = np.linalg.cond(np.abs(A), p=np.inf)

delta = 0.1 #произвольная
x_new = np.empty((n, n))

for i in range(n):
    b_new = b.copy()
    b_new[i] += delta
    x_new[i] = np.linalg.solve(A, b_new)

d = np.array([np.linalg.norm(x - x_i, ord=np.inf) / np.linalg.norm(x, ord=np.inf)
              for x_i in x_new])

plt.figure(figsize=(6, 5))
plt.bar(['1', '2', '3','4'], d)
plt.xlabel('m')
plt.ylabel('d_m')
plt.savefig('cond_precision.png', dpi=300)

d_argmax = np.argmax(d)
b_new = b.copy()
b_new[d_argmax] += delta


rel_delta = (np.linalg.norm(b_new - b, ord=np.inf)
              / np.linalg.norm(b, ord=np.inf))
print(f'm = {d_argmax + 1}')
print(f'd = {d}\n')
print(f'delta(x^m) = {d[d_argmax]}')
print(f'delta(b^m) = {rel_delta}')
print(f'cond(A) = {cond_A}\n')
print(f'{d[d_argmax]} <= {rel_delta * cond_A}')
print(f'delta(x^m) <= cond(A) * delta(b^m)')